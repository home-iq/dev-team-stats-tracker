generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Team {
  id            String        @id @default(uuid())
  name          String
  githubOrgId   BigInt?      @unique
  githubOrgName String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  contributors  Contributor[]
  months        Month[]
  repos         Repo[]
}

model Repo {
  id           String        @id @default(uuid())
  name         String
  githubRepoId String        @unique
  url          String?
  teamId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  commits      Commit[]
  events       Event[]
  pullRequests PullRequest[]
  team         Team          @relation(fields: [teamId], references: [id])
}

model Contributor {
  id           String        @id @default(uuid())
  name         String
  githubUserId String        @unique
  githubLogin  String        @unique
  avatarUrl    String?
  teamId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  commits      Commit[]
  team         Team          @relation(fields: [teamId], references: [id])
  events       Event[]
  pullRequests PullRequest[]
}

model Commit {
  id             String      @id @default(uuid())
  githubCommitId String      @unique
  message        String
  linesAdded     Int
  linesDeleted   Int
  committedAt    DateTime
  repoId         String
  authorId       String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  author         Contributor @relation(fields: [authorId], references: [id])
  repo           Repo        @relation(fields: [repoId], references: [id])

  @@index([repoId])
  @@index([authorId])
  @@index([committedAt])
}

model PullRequest {
  id           String      @id @default(uuid())
  githubPrId   Int         @unique
  title        String
  description  String?
  status       PrStatus
  isDraft      Boolean     @default(false)
  isMerged     Boolean     @default(false)
  sourceBranch String
  targetBranch String
  mergedAt     DateTime?
  closedAt     DateTime?
  linesAdded   Int
  linesDeleted Int
  commits      Int
  comments     Int
  reviews      Int
  authorId     String
  repoId       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  events       Event[]
  author       Contributor @relation(fields: [authorId], references: [id])
  repo         Repo        @relation(fields: [repoId], references: [id])

  @@index([repoId])
  @@index([authorId])
  @@index([createdAt])
  @@index([status])
}

model Event {
  id            String       @id @default(uuid())
  githubEventId String       @unique
  type          EventType
  action        String?
  details       Json?
  rawJson       Json
  pullRequestId String?
  contributorId String
  repoId        String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  contributor   Contributor  @relation(fields: [contributorId], references: [id])
  pullRequest   PullRequest? @relation(fields: [pullRequestId], references: [id])
  repo          Repo         @relation(fields: [repoId], references: [id])

  @@index([repoId])
  @@index([contributorId])
  @@index([type])
  @@index([createdAt])
}

model Month {
  id        String   @id @default(uuid())
  date      DateTime
  teamId    String
  stats     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id])

  @@unique([teamId, date], name: "teamId_date")
  @@index([date])
  @@index([teamId])
}

enum PrStatus {
  OPEN
  CLOSED
  MERGED
}

enum EventType {
  PR_OPENED
  PR_CLOSED
  PR_MERGED
  PR_REOPENED
  PR_REVIEWED
  PR_COMMENTED
  PR_APPROVED
  PR_CHANGES_REQUESTED
  COMMIT_PUSHED
  ISSUE_OPENED
  ISSUE_CLOSED
  ISSUE_COMMENTED
  REPO_CREATED
  REPO_DELETED
  REPO_ARCHIVED
}
